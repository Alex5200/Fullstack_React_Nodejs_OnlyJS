// controllers/departmentController.js
const { sequelize } = require('../models');
const Department = require('../models/Department');
const { body, param, validationResult } = require('express-validator'); // üëà –î–æ–±–∞–≤–ª–µ–Ω–æ

exports.validateDepartment = [
    body('department_name')
      .isLength({ min: 1, max: 100 })
      .withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('budget')
      .optional()
      .isDecimal()
      .withMessage('–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'),
    body('established_date')
      .optional()
      .isISO8601()
      .withMessage('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
  ];
  exports.validateId = [
    param('id').isInt({ min: 1 }).withMessage('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
  ];
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–¥–µ–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—á–µ—Ä–µ–∑ —Å—ã—Ä–æ–π SQL, –±–µ–∑–æ–ø–∞—Å–Ω–æ)
exports.getAllDepartments = async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (limit <= 0 || page <= 0) {
        return res.status(400).json({ error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã page –∏ limit –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏' });
    }

    try {
        const query = `
            SELECT * FROM departments
            ORDER BY department_id
                LIMIT $1 OFFSET $2;
        `;

        const result = await sequelize.query(query, {
            type: sequelize.QueryTypes.SELECT,
            bind: [limit, offset] 
        });

        res.status(200).json({
            page,
            limit,
            result
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤:', error.message);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª
exports.createDepartment = async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    try {
        const allowedFields = ['department_name', 'budget', 'established_date'];
        const sanitizedBody = {};
        allowedFields.forEach(field => {
        if (req.body[field] !== undefined) {
            sanitizedBody[field] = req.body[field];
        }
        });
        const department = await Department.create(req.body);
        res.status(201).json(department);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞:', error.stack);
        res.status(400).json({ error: error.message });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª –ø–æ ID
exports.getDepartmentById = async (req, res) => {
    try {
        const department = await Department.findByPk(req.params.id);
        if (!department) {
            return res.status(404).json({ message: '–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.status(200).json(department);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞:', error.message);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–¥–µ–ª
exports.updateDepartment = async (req, res) => {
    try {
        const [updated] = await Department.update(req.body, {
            where: { department_id: req.params.id }
        });
        if (!updated) {
            return res.status(404).json({ message: '–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const updatedDepartment = await Department.findByPk(req.params.id);
        res.status(200).json(updatedDepartment);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞:', error.message);
        res.status(400).json({ error: error.message });
    }
};

exports.deleteDepartment = async (req, res) => {
    try {
        const deleted = await Department.destroy({
            where: { department_id: req.params.id }
        });
        if (!deleted) {
            return res.status(404).json({ message: '–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.status(204).send(); // No Content
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞:', error.message);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};