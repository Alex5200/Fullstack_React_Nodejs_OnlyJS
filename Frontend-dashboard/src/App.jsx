import { useState, useEffect } from 'react';
import Sidebar from './components/Sidebar';

export default function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤
  const [departments, setDepartments] = useState([]);
  const [loadingDepartments, setLoadingDepartments] = useState(true);
  const [errorDepartments, setErrorDepartments] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const [selectedDeptId, setSelectedDeptId] = useState(null);
  const [employees, setEmployees] = useState([]);
  const [loadingEmployees, setLoadingEmployees] = useState(false);

  // üÜï –°–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newDeptName, setNewDeptName] = useState('');
  const [creating, setCreating] = useState(false);
  const [createError, setCreateError] = useState(null);

  // üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª–æ–≤
  const loadDepartments = async () => {
    setLoadingDepartments(true);
    setErrorDepartments(null);

    try {
      const res = await fetch("http://localhost:3000/api/departments");

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status}`);
      }

      const data = await res.json();

      if (!data.result || !Array.isArray(data.result)) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è { result: [...] }");
      }

      setDepartments(data.result);
    } catch (err) {
      setErrorDepartments(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤");
      console.error(err);
    } finally {
      setLoadingDepartments(false);
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ 
  const handleEditDepartmentEmploymend = async (employee_id, full_name,salary, hire_date, age, department_id ){
    try{
      fetch(`http://localhost:3000/api/employees/${employee_id}`)
    }catch(err){
      console.log(err)
    }
  }
  // üß≠ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const handleDepartmentSelect = async (deptId) => {
    setSelectedDeptId(deptId);
    setLoadingEmployees(true);

    try {
      const res = await fetch(`http://localhost:3000/api/employees?dept_id=${deptId}`);

      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${res.status}`);
      }

      const rawData = await res.json();

      if (!rawData.data || !Array.isArray(rawData.data)) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è {  [...] }");
      }

      const employeesList = rawData.data
        .filter(emp => emp.department_id === deptId)
        .map(emp => ({
          ...emp,
          salary: parseFloat(emp.salary),
        }));

      setEmployees(employeesList);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", err);
      setEmployees([]);
    } finally {
      setLoadingEmployees(false);
    }
  };

  // üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞
  const handleCreateDepartment = async (e) => {
    e.preventDefault();
    if (!newDeptName.trim()) return;

    setCreating(true);
    setCreateError(null);

    try {
      const res = await fetch("http://localhost:3000/api/departments", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          department_name: newDeptName.trim(),
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å budget, established_date, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª");
      }

      // ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
      await loadDepartments();
      setNewDeptName(''); // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
      setShowCreateForm(false); // —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    } catch (err) {
      setCreateError(err.message);
    } finally {
      setCreating(false);
    }
  };

  // üß© –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–¥–µ–ª—ã 1 —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDepartments();
  }, []);

  return (
    <div className="flex h-screen bg-gray-100">
      <Sidebar
        departments={departments}
        loading={loadingDepartments}
        error={errorDepartments}
        onRefresh={loadDepartments}
        setShowCreateForm={setShowCreateForm}
        ShowCreateForms={showCreateForm}
        onCreate={() => setShowCreateForm(true)} // üÜï –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É
        onSelectDepartment={handleDepartmentSelect}
      />

      <main className="flex-1 p-6 overflow-y-auto">
        {/* üÜï –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞ */}
        {showCreateForm && (
          <div className="mb-8 p-6 bg-white rounded-lg shadow-md max-w-md">
            <h2 className="text-xl font-bold mb-4">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª</h2>
            <form onSubmit={handleCreateDepartment}>
              <div className="mb-4">
                <label className="block text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</label>
                <input
                  type="text"
                  value={newDeptName}
                  onChange={(e) => setNewDeptName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"
                  className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              {createError && (
                <p className="text-red-500 text-sm mb-3">{createError}</p>
              )}
              
              <div className="flex space-x-3">
                <button
                  type="submit"
                  disabled={creating}
                  className="px-4 py-2 bg-blue-600 text-black rounded hover:bg-blue-700 disabled:opacity-50 transition"
                >
                  {creating ? (
                    <span className="flex items-center ">
                      <svg className="animate-spin w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –°–æ–∑–¥–∞–Ω–∏–µ...
                    </span>
                  ) : (
                    "–°–æ–∑–¥–∞—Ç—å"
                  )}
                </button>
                <button
                  type="button"
                  onClick={() => setShowCreateForm(false)}
                  className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* üìå –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ */}
        <h1 className="text-2xl font-bold mb-4 text-gray-800">
          {selectedDeptId
            ? (() => {
                const dept = departments.find(d => d.department_id === selectedDeptId);
                return dept ? `–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞: ${dept.department_name}` : `–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ #${selectedDeptId}`;
              })()
            : "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª"}
        </h1>

        {loadingEmployees ? (
          <div className="flex items-center">
            <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mr-2"></div>
            <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...</span>
          </div>
        ) : employees.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {employees.map((emp) => (
              <>
             
                <div key={emp.employee_id} className="bg-white p-4 rounded-lg shadow-sm border">
                  <div className='w-10 h-10 my-2'>
                    <button >
                        edit
                    </button>
                  </div>
                  <h3 className="font-bold text-gray-800">{emp.full_name}</h3>
                  <p className="text-gray-600">–ó–∞—Ä–ø–ª–∞—Ç–∞: <span className="font-medium">{emp.salary.toLocaleString('ru-RU')} ‚ÇΩ</span></p>
                  <p className="text-gray-600">–í–æ–∑—Ä–∞—Å—Ç: {emp.age} –ª–µ—Ç</p>
                  <p className="text-gray-600">–ü—Ä–∏–Ω—è—Ç: {emp.hire_date}</p>
                  {emp.department_name && (
                    <p className="text-xs text-gray-500 mt-1">–û—Ç–¥–µ–ª: {emp.department_name}</p>
                  )}
                  
                </div>
              </>
            ))}
          </div>
        ) : selectedDeptId ? (
          <p className="text-gray-500">–í —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</p>
        ) : (
          <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.</p>
        )}
      </main>
    </div>
  );
}